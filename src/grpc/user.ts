// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: src/grpc/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface UserRequest {
  userId: string;
}

export interface TeamResponse {
  teamIds: string[];
}

function createBaseUserRequest(): UserRequest {
  return { userId: "" };
}

export const UserRequest: MessageFns<UserRequest> = {
  encode(message: UserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: UserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserRequest>, I>>(base?: I): UserRequest {
    return UserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserRequest>, I>>(object: I): UserRequest {
    const message = createBaseUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseTeamResponse(): TeamResponse {
  return { teamIds: [] };
}

export const TeamResponse: MessageFns<TeamResponse> = {
  encode(message: TeamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.teamIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TeamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TeamResponse {
    return {
      teamIds: globalThis.Array.isArray(object?.teamIds) ? object.teamIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: TeamResponse): unknown {
    const obj: any = {};
    if (message.teamIds?.length) {
      obj.teamIds = message.teamIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TeamResponse>, I>>(base?: I): TeamResponse {
    return TeamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TeamResponse>, I>>(object: I): TeamResponse {
    const message = createBaseTeamResponse();
    message.teamIds = object.teamIds?.map((e) => e) || [];
    return message;
  },
};

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  getTeamIds: {
    path: "/UserService/GetTeamIds",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserRequest) => Buffer.from(UserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserRequest.decode(value),
    responseSerialize: (value: TeamResponse) => Buffer.from(TeamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TeamResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  getTeamIds: handleUnaryCall<UserRequest, TeamResponse>;
}

export interface UserServiceClient extends Client {
  getTeamIds(
    request: UserRequest,
    callback: (error: ServiceError | null, response: TeamResponse) => void,
  ): ClientUnaryCall;
  getTeamIds(
    request: UserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TeamResponse) => void,
  ): ClientUnaryCall;
  getTeamIds(
    request: UserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TeamResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
