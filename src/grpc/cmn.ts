// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: src/grpc/cmn.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "";

export interface ProjectRequest {
  /** Array of team IDs */
  teamIds: string[];
}

export interface ProjectsResponse {
  /** Array of Project objects */
  projects: Project[];
}

export interface Project {
  id: number;
  name: string;
  projectDescription: string;
  teamId: string;
  projectStartDate?: Date | undefined;
  projectEndDate?: Date | undefined;
  plannedStartDate: Date | undefined;
  plannedEndDate: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface UserRequest {
  userId: string;
}

export interface TeamResponse {
  teamIds: string[];
}

function createBaseProjectRequest(): ProjectRequest {
  return { teamIds: [] };
}

export const ProjectRequest: MessageFns<ProjectRequest> = {
  encode(message: ProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.teamIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectRequest {
    return {
      teamIds: globalThis.Array.isArray(object?.teamIds) ? object.teamIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ProjectRequest): unknown {
    const obj: any = {};
    if (message.teamIds?.length) {
      obj.teamIds = message.teamIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectRequest>, I>>(base?: I): ProjectRequest {
    return ProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectRequest>, I>>(object: I): ProjectRequest {
    const message = createBaseProjectRequest();
    message.teamIds = object.teamIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseProjectsResponse(): ProjectsResponse {
  return { projects: [] };
}

export const ProjectsResponse: MessageFns<ProjectsResponse> = {
  encode(message: ProjectsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.projects) {
      Project.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projects.push(Project.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectsResponse {
    return {
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => Project.fromJSON(e)) : [],
    };
  },

  toJSON(message: ProjectsResponse): unknown {
    const obj: any = {};
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => Project.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProjectsResponse>, I>>(base?: I): ProjectsResponse {
    return ProjectsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProjectsResponse>, I>>(object: I): ProjectsResponse {
    const message = createBaseProjectsResponse();
    message.projects = object.projects?.map((e) => Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProject(): Project {
  return {
    id: 0,
    name: "",
    projectDescription: "",
    teamId: "",
    projectStartDate: undefined,
    projectEndDate: undefined,
    plannedStartDate: undefined,
    plannedEndDate: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const Project: MessageFns<Project> = {
  encode(message: Project, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.projectDescription !== "") {
      writer.uint32(26).string(message.projectDescription);
    }
    if (message.teamId !== "") {
      writer.uint32(34).string(message.teamId);
    }
    if (message.projectStartDate !== undefined) {
      Timestamp.encode(toTimestamp(message.projectStartDate), writer.uint32(42).fork()).join();
    }
    if (message.projectEndDate !== undefined) {
      Timestamp.encode(toTimestamp(message.projectEndDate), writer.uint32(50).fork()).join();
    }
    if (message.plannedStartDate !== undefined) {
      Timestamp.encode(toTimestamp(message.plannedStartDate), writer.uint32(58).fork()).join();
    }
    if (message.plannedEndDate !== undefined) {
      Timestamp.encode(toTimestamp(message.plannedEndDate), writer.uint32(66).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(74).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.projectDescription = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.projectStartDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.projectEndDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.plannedStartDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.plannedEndDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      projectDescription: isSet(object.projectDescription) ? globalThis.String(object.projectDescription) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      projectStartDate: isSet(object.projectStartDate) ? fromJsonTimestamp(object.projectStartDate) : undefined,
      projectEndDate: isSet(object.projectEndDate) ? fromJsonTimestamp(object.projectEndDate) : undefined,
      plannedStartDate: isSet(object.plannedStartDate) ? fromJsonTimestamp(object.plannedStartDate) : undefined,
      plannedEndDate: isSet(object.plannedEndDate) ? fromJsonTimestamp(object.plannedEndDate) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Project): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectDescription !== "") {
      obj.projectDescription = message.projectDescription;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.projectStartDate !== undefined) {
      obj.projectStartDate = message.projectStartDate.toISOString();
    }
    if (message.projectEndDate !== undefined) {
      obj.projectEndDate = message.projectEndDate.toISOString();
    }
    if (message.plannedStartDate !== undefined) {
      obj.plannedStartDate = message.plannedStartDate.toISOString();
    }
    if (message.plannedEndDate !== undefined) {
      obj.plannedEndDate = message.plannedEndDate.toISOString();
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Project>, I>>(base?: I): Project {
    return Project.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Project>, I>>(object: I): Project {
    const message = createBaseProject();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.projectDescription = object.projectDescription ?? "";
    message.teamId = object.teamId ?? "";
    message.projectStartDate = object.projectStartDate ?? undefined;
    message.projectEndDate = object.projectEndDate ?? undefined;
    message.plannedStartDate = object.plannedStartDate ?? undefined;
    message.plannedEndDate = object.plannedEndDate ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseUserRequest(): UserRequest {
  return { userId: "" };
}

export const UserRequest: MessageFns<UserRequest> = {
  encode(message: UserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: UserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserRequest>, I>>(base?: I): UserRequest {
    return UserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserRequest>, I>>(object: I): UserRequest {
    const message = createBaseUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseTeamResponse(): TeamResponse {
  return { teamIds: [] };
}

export const TeamResponse: MessageFns<TeamResponse> = {
  encode(message: TeamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.teamIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TeamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TeamResponse {
    return {
      teamIds: globalThis.Array.isArray(object?.teamIds) ? object.teamIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: TeamResponse): unknown {
    const obj: any = {};
    if (message.teamIds?.length) {
      obj.teamIds = message.teamIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TeamResponse>, I>>(base?: I): TeamResponse {
    return TeamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TeamResponse>, I>>(object: I): TeamResponse {
    const message = createBaseTeamResponse();
    message.teamIds = object.teamIds?.map((e) => e) || [];
    return message;
  },
};

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  getTeamIds: {
    path: "/UserService/GetTeamIds",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserRequest) => Buffer.from(UserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserRequest.decode(value),
    responseSerialize: (value: TeamResponse) => Buffer.from(TeamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TeamResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  getTeamIds: handleUnaryCall<UserRequest, TeamResponse>;
}

export interface UserServiceClient extends Client {
  getTeamIds(
    request: UserRequest,
    callback: (error: ServiceError | null, response: TeamResponse) => void,
  ): ClientUnaryCall;
  getTeamIds(
    request: UserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TeamResponse) => void,
  ): ClientUnaryCall;
  getTeamIds(
    request: UserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TeamResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

export type ProjectServiceService = typeof ProjectServiceService;
export const ProjectServiceService = {
  getProjectDetails: {
    path: "/ProjectService/GetProjectDetails",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ProjectRequest) => Buffer.from(ProjectRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ProjectRequest.decode(value),
    responseSerialize: (value: ProjectsResponse) => Buffer.from(ProjectsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ProjectsResponse.decode(value),
  },
} as const;

export interface ProjectServiceServer extends UntypedServiceImplementation {
  getProjectDetails: handleUnaryCall<ProjectRequest, ProjectsResponse>;
}

export interface ProjectServiceClient extends Client {
  getProjectDetails(
    request: ProjectRequest,
    callback: (error: ServiceError | null, response: ProjectsResponse) => void,
  ): ClientUnaryCall;
  getProjectDetails(
    request: ProjectRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProjectsResponse) => void,
  ): ClientUnaryCall;
  getProjectDetails(
    request: ProjectRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProjectsResponse) => void,
  ): ClientUnaryCall;
}

export const ProjectServiceClient = makeGenericClientConstructor(
  ProjectServiceService,
  "ProjectService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ProjectServiceClient;
  service: typeof ProjectServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
